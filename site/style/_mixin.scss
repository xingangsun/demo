/* 清除浮动 */
@mixin clearfix() {
    /* zoom: 1;
    &:before,
    &:after {
        content: " ";
        display: table;
    }
    &:after {
        clear: both;
        visibility: hidden;
        font-size: 0;
        height: 0;
    } */
    &:after {
        display: block;
        clear: both;
        visibility: hidden;
        height: 0;
        content: ' ';
    }
}

/* 单行溢出省略 */
@mixin ellipsis() {
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
}

/* 多行溢出省略 */
@mixin ellipsis-multiline($line: 2) {
    overflow: hidden;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: $line;
}

/* 伪类边框 */
@mixin border-pseudo($position: bottom, $width: 1px, $color: $border-color-base) {
    position: absolute;
    z-index: 1;
    content: '';
    @if $position == top or $position == bottom {
        left: 0;
        width: 100%;
    } @else if $position == left or $position == right {
        top: 0;
        height: 100%;
    }
    #{$position}: 0;
    border-#{$position}: $width solid $color;
}


//----------------------------------------------------- 
// media queries scss
// Author: Rafal Bromirski
// https://github.com/paranoida/sass-mediaqueries/blob/master/_media-queries.scss
//----------------------------------------------------- 
//----------------------------------------------------- 
//  Version: 1.3
//  developed on 14/11/2013
//
// Mixins:
//   @ min-screen(width)                      // shortcut for @media screen and (min-width ...)
//   @ max-screen(width)                      // shortcut for @media screen and (max-width ...)
//   @ screen(min-width, max-width)           // shortcut for @media screen and (min-width ...) and (max-width ...)
//   ---
//   @ min-screen-height(height)              // shortcut for @media screen and (min-height ...)
//   @ max-screen-height(height)              // shortcut for @media screen and (max-height ...)
//   @ screen-height(min-height, max-height)  // shortcut for @media screen and (min-height ...) and (max-height ...)
//   ---
//   @ iphone3                                // only iPhone (2, 3G, 3GS) landscape & portrait
//   @ iphone3(landscape)                     // only iPhone (2, 3G, 3GS) only landscape
//   @ iphone3(portrait)                      // only iPhone (2, 3G, 3GS) only portrait
//   ---
//   @ iphone4                                // only iPhone (4, 4S) landscape & portrait
//   @ iphone4(landscape)                     // only iPhone (4, 4S) only landscape
//   @ iphone4(portrait)                      // only iPhone (4, 4S) only portrait
//   ---
//   @ iphone5                                // only iPhone (5) landscape & portrait
//   @ iphone5(landscape)                     // only iPhone (5) only landscape
//   @ iphone5(portrait)                      // only iPhone (5) only portrait
//   ---
//   @ ipad                                   // all iPads (1, 2, 3, 4, Mini) landscape & portrait
//   @ ipad(landscape)                        // all iPads (1, 2, 3, 4, Mini) only landscape
//   @ ipad(portrait)                         // all iPads (1, 2, 3, 4, Mini) only portrait
//   ---
//   @ ipad-retina                            // only iPad (3, 4) landscape & portrait
//   @ ipad-retina(landscape)                 // only iPad (3, 4) only landscape
//   @ ipad-retina(portrait)                  // only iPad (3, 4) only portrait
//   ---
//   @ hdpi(ratio)                            // devices with hidpi displays (default ratio: 1.3)
//
//----------------------------------------------------- 
// screen
//----------------------------------------------------- 
@mixin screen($resMin, $resMax) {
    @media screen and (min-width: $resMin) and (max-width: $resMax) {
        @content;
    }
}

@mixin max-screen($res) {
    @media screen and (max-width: $res) {
        @content;
    }
}

@mixin min-screen($res) {
    @media screen and (min-width: $res) {
        @content;
    }
}

@mixin screen-height($resMin, $resMax) {
    @media screen and (min-height: $resMin) and (max-height: $resMax) {
        @content;
    }
}

@mixin max-screen-height($res) {
    @media screen and (max-height: $res) {
        @content;
    }
}

@mixin min-screen-height($res) {
    @media screen and (min-height: $res) {
        @content;
    }
}

// hdpi
//----------------------------------------------------- 
// Based on bourbon hidpi-media-queries file (https://github.com/thoughtbot/bourbon/blob/master/app/assets/stylesheets/css3/_hidpi-media-query.scss)
// HIDPI mixin. Default value set to 1.3 to target Google Nexus 7 (http://bjango.com/articles/min-device-pixel-ratio/)
@mixin hdpi($ratio: 1.3) {
    @media only screen and (-webkit-min-device-pixel-ratio: $ratio), only screen and (min--moz-device-pixel-ratio: $ratio), only screen and (-o-min-device-pixel-ratio: #{$ratio}/1), only screen and (min-resolution: #{round($ratio*96)}dpi), only screen and (min-resolution: #{$ratio}dppx) {
        @content;
    }
}

// iphone
//----------------------------------------------------- 
@mixin iphone3($orientation: all) {
    $deviceMinWidth: 320px;
    $deviceMaxWidth: 480px;
    $devicePixelRatio: 1;
    @if $orientation==all {
        @media only screen and (min-device-width: $deviceMinWidth) and (max-device-width: $deviceMaxWidth) and (-webkit-device-pixel-ratio: $devicePixelRatio) {
            @content;
        }
    }
    @else {
        @media only screen and (min-device-width: $deviceMinWidth) and (max-device-width: $deviceMaxWidth) and (-webkit-device-pixel-ratio: $devicePixelRatio) and (orientation:#{$orientation}) {
            @content;
        }
    }
}

// iphone-retina
//----------------------------------------------------- 
@mixin iphone4($orientation: all) {
    $deviceMinWidth: 320px;
    $deviceMaxWidth: 480px;
    $devicePixelRatio: 2;
    $deviceAspectRatio: '2/3';
    @if $orientation==all {
        @media only screen and (min-device-width: $deviceMinWidth) and (max-device-width: $deviceMaxWidth) and (-webkit-device-pixel-ratio: $devicePixelRatio) and (device-aspect-ratio: $deviceAspectRatio) {
            @content;
        }
    }
    @else {
        @media only screen and (min-device-width: $deviceMinWidth) and (max-device-width: $deviceMaxWidth) and (-webkit-device-pixel-ratio: $devicePixelRatio) and (device-aspect-ratio: 2/3) and (orientation:#{$orientation}) {
            @content;
        }
    }
}

// iphone-5
//-----------------------------------------------------
@mixin iphone5($orientation: all) {
    $deviceMinWidth: 320px;
    $deviceMaxWidth: 568px;
    $devicePixelRatio: 2;
    $deviceAspectRatio: '40/71';
    @if $orientation==all {
        @media only screen and (min-device-width: $deviceMinWidth) and (max-device-width: $deviceMaxWidth) and (-webkit-device-pixel-ratio: $devicePixelRatio) and (device-aspect-ratio: $deviceAspectRatio) {
            @content;
        }
    }
    @else {
        @media only screen and (min-device-width: $deviceMinWidth) and (max-device-width: $deviceMaxWidth) and (-webkit-device-pixel-ratio: $devicePixelRatio) and (device-aspect-ratio: $deviceAspectRatio) and (orientation:#{$orientation}) {
            @content;
        }
    }
}

// ipads (all)
//-----------------------------------------------------
@mixin ipad($orientation: all) {
    $deviceMinWidth: 768px;
    $deviceMaxWidth: 1024px;
    @if $orientation==all {
        @media only screen and (min-device-width: $deviceMinWidth) and (max-device-width: $deviceMaxWidth) {
            @content;
        }
    }
    @else {
        @media only screen and (min-device-width: $deviceMinWidth) and (max-device-width: $deviceMaxWidth) and (orientation:#{$orientation}) {
            @content;
        }
    }
}

// ipad-retina
//-----------------------------------------------------
@mixin ipad-retina($orientation: all) {
    $deviceMinWidth: 768px;
    $deviceMaxWidth: 1024px;
    $devicePixelRatio: 2;
    @if $orientation==all {
        @media only screen and (min-device-width: $deviceMinWidth) and (max-device-width: $deviceMaxWidth) and (-webkit-device-pixel-ratio: $devicePixelRatio) {
            @content;
        }
    }
    @else {
        @media only screen and (min-device-width: $deviceMinWidth) and (max-device-width: $deviceMaxWidth) and (-webkit-device-pixel-ratio: $devicePixelRatio) and (orientation:#{$orientation}) {
            @content;
        }
    }
}

//-----------------------------------------------------  
// grid scss
// 支持固定宽度和百分比宽度，可以控制是否输出span的class
//----------------------------------------------------- 
// thanks:
// http://www.blankwork.net/
// http://semantic.gs/
// http://heygrady.com/blog/2011/02/17/using-sass-with-the-1kb-grid-system/   
// https://github.com/thoughtbot/bourbon/blob/master/app/assets/stylesheets/functions/_flex-grid.scss
// http://bjorkoy.com/2010/05/css-grids-with-sass/
// variables
// 这里设计的是1000px的布局，每个栅格为65px，共12个，计算公式：(65+20)*12-20 = 1000
// 如果将gridColumnWidth设置为60px，就是盛名的960网格系统
//----------------------------------------------------- 
$gridColumns: 12 !default; // Total number of columns
$gridColumnWidth: 65px !default; // Width of a single column
$gridGutter: 20px !default; // Width of the gutter
$gridSystemWidth: $gridColumns * ($gridColumnWidth + $gridGutter); //grid system width
// percent layout setting
// 百分比布局的变量设置
//----------------------------------------------------- 
$gridPercentSwitch: false !default; // 默认为固定宽度布局，设置为true为百分比
$gridRealWidth: $gridSystemWidth !default;
$gridGutterPercent: percentage($gridGutter / $gridSystemWidth) !default;
@if $gridPercentSwitch {
    $gridRealWidth: 100%;
}

// ie6/7 fluid layout bug: http://tylertate.com/blog/2012/01/05/subpixel-rounding.html
// ie6/7  getWidth($i, true, $correction)
$gridMinWidth: 1000 !default;
$gridCorrection: 0.5 / $gridMinWidth * 100 * 1%;
// margin value
//----------------------------------------------------- 
// if fluid layout the value is $gridGutterPercent
// if fixed layout the value is $gridGutter
$gridMarginValue: if($gridPercentSwitch, $gridGutterPercent, $gridGutter) !default;
// true for grid class(.span1, .span2...)
// ----------------------------------------
$gridSpanSwitch: false !default;
// A Function to calculate width:
// 这个函数几乎是blankwork的灵魂，用来计算宽度的
// Example usage: (based on default values)
// getWidth(3, false) would return 240px
// getWidth(3) or getWidth(3, true) would return 220px;
// and plain getWidth() or getWidth would return 940px;
@function getWidth($i:$gridColumns, $onlyInnerWidth:true, $subtract:0) {
    // First set a default return value
    $return: (($gridColumnWidth + $gridGutter) * $i / $gridSystemWidth) * $gridRealWidth - $subtract !default;
    // If we want to get only the inner width (without gutter)
    @if $onlyInnerWidth==true {
        // Return the total calculated width, without the margins
        // If the second parameter of this function is not specified
        // This is what is going to be returned
        $return: ((($gridColumnWidth + $gridGutter) * $i - $gridGutter) / $gridSystemWidth) * $gridRealWidth - $subtract;
    }
    @return $return;
}

// A Function to calculate percent width:
// Example:getPercent(3,6)
@function getPercent($i, $container-columns:$gridColumns, $onlyInnerWidth:false, $subtract:0) {
    $percentage: percentage($i / $container-columns);
    @if $onlyInnerWidth==true {
        $width: $i * $gridColumnWidth + ($i - 1) * $gridGutter;
        $container-width: $container-columns * $gridColumnWidth + ($container-columns - 1) * $gridGutter;
        $percentage: percentage($width / $container-width);
    }
    @return $percentage - $subtract;
}

// span or column's gutter
%margin-gutter {
    margin-right: $gridMarginValue;
    @if $gridPercentSwitch and $lte7 {
        *margin-right: $gridMarginValue - $gridCorrection;
    }
}

// Column Mixin:
// We're defining the default values as follows:
// Default Column Count: Max Column Count
// Padding (explained below): 0
@mixin column($i: $gridColumns, $subtract:0) {
    // 解决当$i 小于$gridColumns的时候需要float
    @if $i < $gridColumns {
        @extend %float;
    }
    @extend %margin-gutter;
    $getWidth: getWidth($i, true, $subtract); // Use the width calculation function to get the width 
    width: $getWidth;
    @if $gridPercentSwitch and $lte7 {
        *width: $getWidth - $gridCorrection;
    }
}

// wrapper
// This typically is a main content wrapper, 
// But just in case someone finds an alternative use of this, 
// we shouldhave the flexibility
// So wrapper( column count, center ?, subtract)
@mixin wrapper($i: $gridColumns, $center:true, $subtract:0) {
    @extend %clearfix;
    // Because this is a wrapper, we don't need the outer gutter - we need the full width
    $getWrapperWidth: getWidth($i, false);
    // In case there is a need to subtract the wrapper
    $wrapperWidth: $getWrapperWidth - $subtract;
    width: $wrapperWidth;
    // If we want the wrapper to be centered (by default we do)
    @if $center==true {
        margin-left: auto;
        margin-right: auto;
    }
}

// alpha & omega
//----------------------------------------------------- 
@mixin alpha {
    margin-left: 0;
}

@mixin omega {
    margin-right: 0;
}

// prepend & append
//----------------------------------------------------- 
@mixin prepend($i:1, $subtract:0) {
    margin-left: getWidth($i, false, $subtract);
}

@mixin append($i:1, $subtract:0) {
    margin-right: getWidth($i, false, $subtract);
}

// class span1-$gridColumns
// span的class循环输出，通过变量$gridSpanSwitch来控制是否输出
//-----------------------------------------------------  
@if $gridSpanSwitch {
    @for $i from 1 through $gridColumns {
        .span#{$i} {
            @extend %float;
            @extend %margin-gutter;
            width: getWidth($i);
            @if $gridPercentSwitch and $lte7 {
                *width: getWidth($i) - $gridCorrection;
            }
        }
    }
}
